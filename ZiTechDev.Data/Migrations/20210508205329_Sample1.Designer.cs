// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZiTechDev.Data.Context;

namespace ZiTechDev.Data.Migrations
{
    [DbContext(typeof(ZiTechDevDBContext))]
    [Migration("20210508205329_Sample1")]
    partial class Sample1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            RoleId = new Guid("105e57d3-188c-40ba-9409-358f55415061")
                        },
                        new
                        {
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            RoleId = new Guid("0a6a76db-e350-43bb-b023-74be2ae4be2c")
                        },
                        new
                        {
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029")
                        },
                        new
                        {
                            UserId = new Guid("a2e0ca3e-1a80-4554-9389-0ec66ab7a259"),
                            RoleId = new Guid("0a6a76db-e350-43bb-b023-74be2ae4be2c")
                        },
                        new
                        {
                            UserId = new Guid("a2e0ca3e-1a80-4554-9389-0ec66ab7a259"),
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029")
                        },
                        new
                        {
                            UserId = new Guid("2d2a1cdd-d4a5-4ae4-9f26-f2fa1bedd6ae"),
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FunctionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FunctionId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Đăng nhập vào trang quản trị",
                            FunctionId = 1,
                            Name = "AdminLogin"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Đăng xuất khỏi tài khoản quản trị",
                            FunctionId = 1,
                            Name = "AdminLogout"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Đăng nhập vào trang người dùng",
                            FunctionId = 3,
                            Name = "UserLogin"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Đăng xuất tài khoản người dùng",
                            FunctionId = 3,
                            Name = "UserLogout"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Đăng ký tài khoản người dùng",
                            FunctionId = 3,
                            Name = "UserRegister"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("105e57d3-188c-40ba-9409-358f55415061"),
                            ConcurrencyStamp = "",
                            Description = "Administrator role",
                            Name = "ADMIN",
                            NormalizedName = "admin"
                        },
                        new
                        {
                            Id = new Guid("0a6a76db-e350-43bb-b023-74be2ae4be2c"),
                            ConcurrencyStamp = "",
                            Description = "Modifier role",
                            Name = "MOD",
                            NormalizedName = "mod"
                        },
                        new
                        {
                            Id = new Guid("6185636e-7edc-4826-99b9-c862727de029"),
                            ConcurrencyStamp = "",
                            Description = "User role",
                            Name = "USER",
                            NormalizedName = "user"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("LastAccess")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            DateOfBirth = new DateTime(1998, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfJoin = new DateTime(2021, 5, 9, 3, 53, 28, 937, DateTimeKind.Local).AddTicks(5001),
                            DisplayName = "Zi_Admin",
                            Email = "ZITECH.DEV@GMAIL.COM",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastAccess = new DateTime(2021, 5, 9, 3, 53, 28, 936, DateTimeKind.Local).AddTicks(3261),
                            LastName = "Hiếu",
                            LockoutEnabled = false,
                            MiddleName = "Ngọc",
                            NormalizedEmail = "zitech.dev@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEMIRQcAsv5wvWo0Y6TOrBLXYLVPQvePLbMyFYuCVyt6ia+i97lT2ifThDLpdKGzr+w==",
                            PhoneNumber = "(+84) 943 144 178",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = true,
                            UserName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("a2e0ca3e-1a80-4554-9389-0ec66ab7a259"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            DateOfBirth = new DateTime(1998, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfJoin = new DateTime(2021, 5, 9, 3, 53, 28, 952, DateTimeKind.Local).AddTicks(5353),
                            DisplayName = "Zi_Mod",
                            Email = "ZITECH.DEV@GMAIL.COM",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastAccess = new DateTime(2021, 5, 9, 3, 53, 28, 952, DateTimeKind.Local).AddTicks(5328),
                            LastName = "Hiếu",
                            LockoutEnabled = false,
                            MiddleName = "Ngọc",
                            NormalizedEmail = "zitech.dev@gmail.com",
                            NormalizedUserName = "mod",
                            PasswordHash = "AQAAAAEAACcQAAAAEKYD8YSMqSAVu1USCYD66oDAFSJbsGP0wFJfvlqEPi4FUo1Qx5rGcwfflKonH8G+Sw==",
                            PhoneNumber = "(+84) 943 144 178",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = true,
                            UserName = "MOD"
                        },
                        new
                        {
                            Id = new Guid("2d2a1cdd-d4a5-4ae4-9f26-f2fa1bedd6ae"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            DateOfBirth = new DateTime(1998, 2, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfJoin = new DateTime(2021, 5, 9, 3, 53, 28, 959, DateTimeKind.Local).AddTicks(1414),
                            DisplayName = "Zi_User",
                            Email = "ZITECH.DEV@GMAIL.COM",
                            EmailConfirmed = true,
                            FirstName = "Nguyễn",
                            Gender = 0,
                            LastAccess = new DateTime(2021, 5, 9, 3, 53, 28, 959, DateTimeKind.Local).AddTicks(1405),
                            LastName = "Hiếu",
                            LockoutEnabled = false,
                            MiddleName = "Ngọc",
                            NormalizedEmail = "zitech.dev@gmail.com",
                            NormalizedUserName = "user",
                            PasswordHash = "AQAAAAEAACcQAAAAEIUTo/TCTWk+tep6nXiM1z20hubPIP/DHUAXhmxPjsKk2cV92dhyhvSUF5WbYp4xiw==",
                            PhoneNumber = "(+84) 943 144 178",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "",
                            TwoFactorEnabled = true,
                            UserName = "User"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SEOAlias")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SEODescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SEOTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = "vi-VN",
                            Name = "Ứng dụng Desktop",
                            SEOAlias = "ung-dung-desktop",
                            SEODescription = "Những bài viết về các ứng dụng trên máy tính để bàn, laptop ...",
                            SEOTitle = "Ứng dụng dành cho máy tính để bàn, laptop"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = "en-US",
                            Name = "Desktop Application",
                            SEOAlias = "desktop-application",
                            SEODescription = "Articles about applications on desktop computers, laptops ...",
                            SEOTitle = "Application for computer, laptop"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = "vi-VN",
                            Name = "Ứng dụng Web",
                            SEOAlias = "ung-dung-web",
                            SEODescription = "Những bài viết về lập trình web, ứng dụng trực tuyến, đám mây, trình duyệt web ...",
                            SEOTitle = "Ứng dụng dành cho nền tảng website & internet"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = "en-US",
                            Name = "Web Application",
                            SEOAlias = "web-application",
                            SEODescription = "Articles about web programming, online applications, cloud, web browser ...",
                            SEOTitle = "Application for website & internet platform"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            LanguageId = "vi-VN",
                            Name = "Ứng dụng đi động",
                            SEOAlias = "ung-dung-di-dong",
                            SEODescription = "Những bài viết về lập trình trên thiết bị di dộng như: điện thoại thông minh, máy tính bảng, đồng hồ thông minh, TV thông minh, Ô tô thông minh ...",
                            SEOTitle = "Ứng dụng dành cho thiết bị di động"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            LanguageId = "en-US",
                            Name = "Mobile Application",
                            SEOAlias = "mobile-application",
                            SEODescription = "Articles on programming on mobile devices such as smartphones, tablets, smart watches, smart TVs, smart cars ...",
                            SEOTitle = "Application for mobile devices"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            LanguageId = "vi-VN",
                            Name = "Các học thuật",
                            SEOAlias = "cac-hoc-thuat",
                            SEODescription = "Những bài viết về: trí tuệ nhân tạo, chuỗi khối, dữ liệu lớn, internet vạn vật ...",
                            SEOTitle = "Nghiên cứu & thực hành các công nghệ 4.0"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            LanguageId = "en-US",
                            Name = "academics",
                            SEOAlias = "Academics",
                            SEODescription = "Articles about: artificial intelligence, blockchain, big data, internet of things ...",
                            SEOTitle = "Research & practice 4.0 technologies"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Bình luận 1",
                            LikeCount = 0,
                            PostId = 1,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(2831)
                        },
                        new
                        {
                            Id = 2,
                            Content = "Bình luận 2",
                            LikeCount = 0,
                            PostId = 1,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(4741)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Bình luận 3",
                            LikeCount = 0,
                            PostId = 2,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(4826)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Bình luận con 1",
                            LikeCount = 5,
                            ParentId = 1,
                            PostId = 1,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(4829)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Bình luận con 2",
                            LikeCount = 0,
                            ParentId = 1,
                            PostId = 1,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(4831)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Bình luận con con 5",
                            LikeCount = 0,
                            ParentId = 5,
                            PostId = 1,
                            Time = new DateTime(2021, 5, 9, 3, 53, 28, 968, DateTimeKind.Local).AddTicks(4832)
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Tất cả các tác vụ có trong ứng dụng",
                            Name = "Admin",
                            Url = "/ziadmin/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Các tác vụ về viết, duyệt, đăng bài và kiểm duyệt người dùng ...",
                            Name = "Mod",
                            ParentId = 1,
                            Url = "/zimod/"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Các tác vụ về viết, duyệt, đăng bài ...",
                            Name = "PostMod",
                            ParentId = 2,
                            Url = "/zimod/postmod/"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Các tác vụ về lọc, kiểm duyệt người dùng ...",
                            Name = "UserMod",
                            ParentId = 2,
                            Url = "/zimod/usermod/"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Các tác vụ đọc, bình luận, like, share, đăng ký thành viên, gửi phản hồi ... ",
                            Name = "User",
                            Url = "/ziuser/"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Language", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = "vi-VN",
                            IsDefault = true,
                            Name = "Tiếng Việt"
                        },
                        new
                        {
                            Id = "en-US",
                            IsDefault = false,
                            Name = "Tiếng Anh"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Log", b =>
                {
                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ActionTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("ActivityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            ActivityId = 1,
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            ActionTime = new DateTime(2021, 5, 9, 3, 53, 28, 969, DateTimeKind.Local).AddTicks(468)
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("105e57d3-188c-40ba-9409-358f55415061"),
                            ActivityId = 1
                        },
                        new
                        {
                            RoleId = new Guid("105e57d3-188c-40ba-9409-358f55415061"),
                            ActivityId = 2
                        },
                        new
                        {
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029"),
                            ActivityId = 3
                        },
                        new
                        {
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029"),
                            ActivityId = 4
                        },
                        new
                        {
                            RoleId = new Guid("6185636e-7edc-4826-99b9-c862727de029"),
                            ActivityId = 5
                        },
                        new
                        {
                            RoleId = new Guid("0a6a76db-e350-43bb-b023-74be2ae4be2c"),
                            ActivityId = 3
                        },
                        new
                        {
                            RoleId = new Guid("0a6a76db-e350-43bb-b023-74be2ae4be2c"),
                            ActivityId = 4
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("LastModify")
                        .HasColumnType("datetime2");

                    b.Property<int>("LikeCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SharedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<byte[]>("Thumbnail")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2021, 5, 9, 3, 53, 28, 967, DateTimeKind.Local).AddTicks(4902),
                            LikeCount = 0,
                            SharedCount = 0,
                            Status = 1,
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2021, 5, 9, 3, 53, 28, 967, DateTimeKind.Local).AddTicks(8369),
                            LikeCount = 0,
                            SharedCount = 0,
                            Status = 0,
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            ViewCount = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2021, 5, 9, 3, 53, 28, 967, DateTimeKind.Local).AddTicks(8478),
                            LikeCount = 0,
                            SharedCount = 0,
                            Status = 2,
                            UserId = new Guid("b2d8f0ba-64d4-448d-92d7-d300465d0337"),
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.PostGallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<byte[]>("EncodeString")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("FileSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<bool>("IsThumbnail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Path")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostGalleries");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.PostTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("SEOAlias")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SEODescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SEOTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PostId");

                    b.ToTable("PostTranslations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Nội dung",
                            LanguageId = "vi-VN",
                            PostId = 1,
                            SEOAlias = "tieu-de",
                            SEODescription = "Mô tả",
                            SEOTitle = "Tiêu đề"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Content",
                            LanguageId = "en-US",
                            PostId = 1,
                            SEOAlias = "description",
                            SEODescription = "Description",
                            SEOTitle = "Title"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Nội dung",
                            LanguageId = "vi-VN",
                            PostId = 2,
                            SEOAlias = "tieu-de",
                            SEODescription = "Mô tả",
                            SEOTitle = "Tiêu đề"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Content",
                            LanguageId = "en-US",
                            PostId = 2,
                            SEOAlias = "description",
                            SEODescription = "Description",
                            SEOTitle = "Title"
                        },
                        new
                        {
                            Id = 5,
                            Content = "Nội dung",
                            LanguageId = "vi-VN",
                            PostId = 3,
                            SEOAlias = "tieu-de",
                            SEODescription = "Mô tả",
                            SEOTitle = "Tiêu đề"
                        },
                        new
                        {
                            Id = 6,
                            Content = "Content",
                            LanguageId = "en-US",
                            PostId = 3,
                            SEOAlias = "description",
                            SEODescription = "Description",
                            SEOTitle = "Title"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Setting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Key = "HomeTitle",
                            Type = 0,
                            Value = "ZiTechDev - HomePage"
                        },
                        new
                        {
                            Key = "AboutTitle",
                            Type = 0,
                            Value = "ZiTechDev - About"
                        },
                        new
                        {
                            Key = "ContactTitle",
                            Type = 0,
                            Value = "ZiTechDev - Contact"
                        },
                        new
                        {
                            Key = "MaxCommentLevel",
                            Type = 1,
                            Value = "2"
                        },
                        new
                        {
                            Key = "PostOfPage",
                            Type = 1,
                            Value = "12"
                        },
                        new
                        {
                            Key = "CommentOfPage",
                            Type = 1,
                            Value = "10"
                        });
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Activity", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Function", "Function")
                        .WithMany("Activities")
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Function");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.CategoryTranslation", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Category", "Category")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZiTechDev.Data.Entities.Language", "Language")
                        .WithMany("CategoryTranslations")
                        .HasForeignKey("LanguageId");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Comment", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Log", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Activity", "Activity")
                        .WithMany("Logs")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZiTechDev.Data.Entities.AppUser", "AppUser")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Permission", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Activity", "Activity")
                        .WithMany("Permissions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZiTechDev.Data.Entities.AppRole", "AppRole")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppRole");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Post", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZiTechDev.Data.Entities.AppUser", "AppUser")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.PostGallery", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Post", "Post")
                        .WithMany("PostGalleries")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.PostTranslation", b =>
                {
                    b.HasOne("ZiTechDev.Data.Entities.Language", "Language")
                        .WithMany("PostTranslations")
                        .HasForeignKey("LanguageId");

                    b.HasOne("ZiTechDev.Data.Entities.Post", "Post")
                        .WithMany("PostTranslations")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Activity", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.AppRole", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.AppUser", b =>
                {
                    b.Navigation("Logs");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Category", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Function", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Language", b =>
                {
                    b.Navigation("CategoryTranslations");

                    b.Navigation("PostTranslations");
                });

            modelBuilder.Entity("ZiTechDev.Data.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostGalleries");

                    b.Navigation("PostTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
